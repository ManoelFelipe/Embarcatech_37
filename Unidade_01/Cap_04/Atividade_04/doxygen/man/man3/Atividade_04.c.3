.TH "C:/Users/manoe/OneDrive/TI/EmbarcaTech/Segunda Fase/01_Unid.01_Microcontrolador/Atividades/Cap_04/Atividade_04/Atividade_04/src/Atividade_04.c" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/manoe/OneDrive/TI/EmbarcaTech/Segunda Fase/01_Unid.01_Microcontrolador/Atividades/Cap_04/Atividade_04/Atividade_04/src/Atividade_04.c \- Simulação de semáforo de trânsito com acessibilidade para pedestres\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <stdio\&.h>\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include 'pico/stdlib\&.h'\fP
.br
\fR#include 'hardware/gpio\&.h'\fP
.br
\fR#include 'hardware/timer\&.h'\fP
.br
\fR#include 'hardware/i2c\&.h'\fP
.br
\fR#include 'ssd1306_i2c\&.h'\fP
.br
\fR#include 'ssd1306\&.h'\fP
.br
\fR#include 'ssd1306_font\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRED_TIME_SEC\fP   10"
.br
.RI "Tempo total de sinal vermelho (s) "
.ti -1c
.RI "#define \fBGREEN_TIME_SEC\fP   10"
.br
.RI "Tempo total de sinal verde (s) "
.ti -1c
.RI "#define \fBYELLOW_TIME_SEC\fP   3"
.br
.RI "Tempo total de sinal amarelo (s) "
.ti -1c
.RI "#define \fBCOUNTDOWN_START\fP   5"
.br
.RI "Início da contagem regressiva (últimos segundos) "
.ti -1c
.RI "#define \fBLED_RED_PIN\fP   13"
.br
.RI "Pino do LED vermelho\&. "
.ti -1c
.RI "#define \fBLED_GREEN_PIN\fP   11"
.br
.RI "Pino do LED verde\&. "
.ti -1c
.RI "#define \fBLED_BLUE_PIN\fP   12"
.br
.RI "Pino do LED azul (não usado) "
.ti -1c
.RI "#define \fBBUZZER_PIN1\fP   10"
.br
.RI "Pino do buzzer principal\&. "
.ti -1c
.RI "#define \fBBUZZER_PIN2\fP   21"
.br
.RI "Pino do buzzer secundário\&. "
.ti -1c
.RI "#define \fBBUTTON_PIN1\fP   5"
.br
.RI "Botão lado 1 (prioridade em empate) "
.ti -1c
.RI "#define \fBBUTTON_PIN2\fP   6"
.br
.RI "Botão lado 2\&. "
.ti -1c
.RI "#define \fBI2C_SDA_PIN\fP   14"
.br
.ti -1c
.RI "#define \fBI2C_SCL_PIN\fP   15"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBstate_t\fP { \fBST_RED\fP = 0, \fBST_GREEN\fP, \fBST_YELLOW\fP }"
.br
.RI "Estados possíveis do semáforo\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (void)"
.br
.RI "Função principal: inicializa hardware e entra em loop de espera\&. "
.in -1c
.SH "Detailed Description"
.PP 
Simulação de semáforo de trânsito com acessibilidade para pedestres\&. 

Implementa ciclo semafórico fixo (Vermelho → Verde → Amarelo) e lógica de travessia para pedestres\&. Ao acionar botão em vermelho, reinicia-se o temporizador para 10 s completos e exibe-se contagem regressiva nos últimos 5 s no display OLED\&. Botões em verde/amarelo agendam countdown no próximo vermelho\&. Em vermelho, buzzer em GP10 e GP21 bipam a 1 Hz\&. Usei estilo Doxygen e comentários completos\&. Para fins didáticos\&.

.PP
• Ciclo semafórico fixo: Vermelho 10 s → Verde 10 s → Amarelo 3 s ↺ 
.br
 Requisitos de pedestre: 
.br
.IP "\(bu" 2
Em VERMELHO: qualquer botão reinicia contagem para 10 s, exibe 
.br
 imediatamente "Sinal: VERMELHO" e, nos últimos 5 s, mostra 
.br
 contagem regressiva no OLED\&. 
.br

.IP "\(bu" 2
Em VERDE ou AMARELO: botão A/B agenda countdown no próximo VERMELHO; Verde encurtado se pedido em VERDE\&.
.IP "\(bu" 2
Travessia bidirecional: um botão em cada lado da avenida (BUTTON_PIN1 e BUTTON_PIN2)\&. Quando ambos são acionados simultaneamente, define-se prioridade para BUTTON_PIN1 (lado 1) sobre BUTTON_PIN2 (lado 2)\&. 
.br
 • Buzzer soa 1 Hz SEMPRE em VERMELHO\&. - Acessibilidade 
.br
 • Botão A (GPIO 5) ou Botão B (6)\&. • Lógica baseada em IRQ GPIO + temporizador 1 Hz\&. Sem polling intenso\&.
.PP

.PP
Hardware:
.IP "\(bu" 2
LED RGB: GP11 (Verde), GP13 (Vermelho) (GP12 não usado)
.IP "\(bu" 2
Buzzer: GP10, GP21
.IP "\(bu" 2
Botões: GP5, GP6 (INPUT_PULLUP)
.IP "\(bu" 2
OLED: I2C1 SDA GP14, SCL GP15
.PP

.PP
\fBAuthor\fP
.RS 4
Manoel Furtado 
.RE
.PP
\fBDate\fP
.RS 4
15 mai 2025 
.RE
.PP
\fBCopyright\fP
.RS 4
2025 Manoel Furtado (MIT License) (veja LICENSE\&.md) 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBstate_t\fP"

.PP
Estados possíveis do semáforo\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIST_RED \fP
Vermelho 
.TP
\f(BIST_GREEN \fP
Verde 
.TP
\f(BIST_YELLOW \fP
Amarelo 
.SH "Function Documentation"
.PP 
.SS "int main (void )"

.PP
Função principal: inicializa hardware e entra em loop de espera\&. 
.IP "1." 4
Chama hw_init() para configurar GPIOs, I2C e display OLED\&.
.IP "2." 4
Define cor inicial do semáforo para vermelho e exibe no OLED\&.
.IP "3." 4
Adiciona timer periódico de 1 Hz para gerenciar transições de estado e contagem regressiva\&.
.IP "4." 4
Entra em loop infinito com tight_loop_contents(), permitindo que a CPU aguarde de forma eficiente por interrupções de botões e callbacks\&. 
.PP
\fBReturns\fP
.RS 4
Esta função não retorna\&. 
.RE
.PP

.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
